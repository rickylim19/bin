#! /bin/bash
#
# macsPeakCalling.sh
# Copyright (C) 2014 ricky <ricky@tblab-csi>
#
# Distributed under terms of the MIT license.
#

#######################################
# Macs Peak Caller using call-summits #
#######################################

trap 'echo Keyboard interruption... ; exit 1' SIGINT

if [ $# -eq 0 ]; then
    echo "./macsPeakCalling.sh -c 4 -i Input/bam -o Output/macs 2> log/macsPeakCall.txt"
    echo "e.g of the running samples:"
    echo "time ./macsPeakCalling.sh -c 4 -i CebpB/Input -o CebpB/Output 2> CebpB/log_CebpB.txt &"
exit 1
fi

while getopts ":c:i:o:" opt; do
    case $opt in
        c)
            echo "# core: $OPTARG" >&2
            core="$OPTARG"
            ;;
        i)
            echo "# input_dir: $OPTARG" >&2
            input_d="$OPTARG"
            ;;
        o)
            echo "# output_dir: $OPTARG" >&2
            output_d="$OPTARG"
            ;;
        \?)
            echo "# invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "# option -$OPTARG requires an argument" >&2
            exit 1
            ;;
    esac
done

# check if the directory exists
if [ ! -d $output_d ]; then
    mkdir -p $output_d
fi

n=0
maxjobs=$core
for f in `ls $input_d -I '*Input*'`; # list all files, except the input
do

    # get protein from the filename
    # e.g filename: KoefflerLab_BM_ChIPseq_Cebpa_mm10_q10rmdup.bam
    IFS='_' read -a array <<< $f
    protein="${array[3]%%.*}"     # e.g Cebpa

    # get the control file
    # e.g filename: KoefflerLab_BM_ChIPseq_input_mm10_q10rmdup.bam
    control=`echo $f | sed "s/$protein/Input/"`

    # name of the output file, i.e, NAME_peaks.xls', 'NAME_negative_peaks.xls', 'NAME_peaks.bed' 
    # e.g: KoefflerLab_BM_ChIPseq_Cebpa_mm10_q10rmdup
    output_n="${f%%.*}"

    if [ ! -f $input_d/$control ]; then
        echo "MACS Peaks Calling $f: NotOK (no control)" >&2;
        continue
    else
        ( macs2 callpeak -g mm -p 0.001 --call-summits -t $input_d/$f -c $input_d/$control -n $output_d/$output_n --verbose 0 && echo "MACS Peaks Calling $f: OK" >&2 ) &
        if (( $(($((++n)) % $maxjobs)) == 0 )) ; then
            wait # wait until all have finished (not optimal, but most times good enough)
            echo $n wait
        fi

        wait

        # get unique peaks (filter the peaks calls by macs with 0 FDR
        grep -v "#" $output_d/${output_n}_peaks.xls | grep -v "start" | awk '{if ($7>=3) print ;}' | sort -gr -k9 | awk '{OFS="\t"; if (10^(-1*($9))*NR < 1) print $1, $2, $3}' | bedtools sort -i stdin | uniq > $output_d/${output_n}_unique.bed && echo "MACS Unique Peaks .bed $f: OK" >&2;

        # get the gtf file
        awk -v filename="$output_n" '{OFS="\t"; print $1, filename, "peak", $2+1, $3, 1, "+", ".", "peak="$1 "_" $2 "_" $3}' $output_d/${output_n}_unique.bed > $output_d/${output_n}_unique.gtf && echo "MACS Unique Peaks .gtf $f: OK" >&2;

        # count the feature
        featureCounts -a $output_d/${output_n}_unique.gtf -F GTF -t peak -g peak -s 0 -O -T 10 -o "$output_d/${output_n}.count" "$input_d/$f" && echo "MACS featureCounts $f: OK" >&2;

    fi

done
